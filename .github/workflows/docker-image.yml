name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read   # 👈 habilita que el token pueda leer el repo
  
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    #TENER MUCHO CUIDADO CON LOS ESPACIOS Y SINTAXIS
    #Agregar un nombre al paso lo mas legible posible (name)

    #Paso 1. Lo que hace el Checkout, basicamente es tomar lo que tenemos en el repositorio.
    #Solo dejamos un "-", porque es la instrucción de todo el paso.
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        #Haga una busqueda profunda en historial del commit. Buscar mas información en la documentación de GitHub.  
        fetch-depth: 0 
    #Paso 2. Intentar autentificarnos
    #El comando en consola es docker login -u <user_dockerhub> -p <Token o pwd de dockerhub>
    - name: Docker login
      #Declaramos variables de entorno para que sea mas facil de manipular. Aunque se pueden usar de forma directa los secrets.
      env:
        #<nombre_variable> : <valor_variable>
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #La "|" (pipeline) siginifica que cada unos de los siguientes comandos es independientes. Se puede correr todo en una linea.  
      #Los echo solo son con fines de practica.
      #Se podrían colocar también de forma directa los secrets, pero como variables es mas legible el código.
      run: |
        echo: "Inicia login" 
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        echo "Fin login"
    # - name: Build the Docker image
    #   run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
