name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read   # 👈 habilita que el token pueda leer el repo
  
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    #TENER MUCHO CUIDADO CON LOS ESPACIOS Y SINTAXIS
    #Agregar un nombre al paso lo mas legible posible (name)

    #Paso 1. Lo que hace el Checkout, basicamente es tomar lo que tenemos en el repositorio.
    #Solo dejamos un "-", porque es la instrucción de todo el paso.
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        #Haga una busqueda profunda en historial del commit. Buscar mas información en la documentación de GitHub.  
        fetch-depth: 0 
    #Agregar el plugin para generar el versionamiento de forma automática (Es muy importante que este después del Checkout code)
    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v4.0.3
      with:
        #Realizar configuraciones personalizadas
        major_pattern: "major:" #Si al inicio del commit esta "major:", indica que es un nuevo versionamiento mayor. EJ major:Descripcion commit
        minor_pattern: "feat:"  #Si al inicio del commit esta "major:", indica que es un nuevo feature
        format: "${major}.${minor}.${patch}-prerelease${increment}" #Cada commit que se haga incrementa el prerelease
      id: version #Para poder usarlo debemos darle un identificador   
        
    #Paso 2. Intentar autentificarnos
    #El comando en consola es docker login -u <user_dockerhub> -p <Token o pwd de dockerhub>
    - name: Docker login
      #Declaramos variables de entorno para que sea mas facil de manipular. Aunque se pueden usar de forma directa los secrets.
      env:
        #<nombre_variable> : <valor_variable>
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        #steps.<id_del_step>.outputs.<name_output> name_output se puede revisar la documentación del action para ver los outputs
        NEW_VERSION: ${{ steps.version.outputs.version }}
        
      #La "|" (pipeline) siginifica que cada unos de los siguientes comandos es independientes. Se puede correr todo en una linea.  
      #Los echo solo son con fines de practica.
      #Se podrían colocar también de forma directa los secrets, pero como variables es mas legible el código.
      #Comando usadp en el curso (si funciona)
      #docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      #Si tu contraseña tiene caracteres especiales, es más seguro usar --password-stdin
      #echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
        echo "New version: $NEW_VERSION"

    #Se comentaron para hacer las pruebas de la clase de versionamiento automatico y no demorar mucho.
    #Estos comandos se podrían haber ejecutado en el paso anterior, pero es mejor tener los pasos separados (manejo de errores)
    # - name: Build Docker Image
    #   run: |
    #     docker build --tag rohet/docker-graphql:0.0.1 .
    #     docker build --tag rohet/docker-graphql:latest .

    # - name: Push Docker Image
    #   run: |
    #     docker push rohet/docker-graphql:0.0.1
    #     docker push rohet/docker-graphql:latest
